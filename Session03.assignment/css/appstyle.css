html, body {
  height:100%;
  width:100%;
}

/* edits */
/* edits */
/* edits */
/* edits */
/* edits */

body {
 background-image: url(https://66.media.tumblr.com/0b79357609f6e8738365a827ce7be255/0536515bb0709506-af/s640x960/005c45c44aa1979e9b65c90e383d271654d318b9.jpg);
  background-repeat: repeat;
  background-size: 100%;

}

aside {
  background-image: url(https://i1.sndcdn.com/artworks-000250895611-ai5dbv-t500x500.jpg);
  background-repeat: no-repeat;
  background-size: cover;
}

.container > * {
  border-radius: 5px;
}

.footer {
  background-image: linear-gradient(to right, #82B0E6, #E6AAAA);
}

.sidebar {
  text-align: center;
}

.blegh {
  font-size: 10px;
}

article {
  overflow: scroll;
}

/* edits end */
/* edits end */


/* Sections of Layout
-------------------------------------- */
/* Generic styles for demo purposes
-------------------------------------- */
.container {
  font-family: Helvetica, Arial, sans-serif;
  height:98%;
  width:98%;
}

.container > * {
  background-color: #ccc;
  padding: 1em;
}

/* Typically, you wouldn't specify a height or min-height on this, instead allowing your actual content (i.e., text, images, etc.) to dictate the height of your content area. But since this example has very minimal content, I've set a min-height to mimic a taller content area. */
.content {
  min-height: 40%;
  overflow-y: scroll;
}

/* Layout is stacked vertically by default (for narrower viewports), so give some breathing room between the sections. */
/* Select all elements where parent is a container */
.container > * {
  margin-bottom: 2%;
}

/* Now let's apply grid for wider viewports. */
@media screen and (min-width: 40em) {
  .container > * {
    margin-bottom: 0;
  }

/* edits */
/* edits */
/* edits */
/* edits */
/* edits */

aside {
  background-image: url(https://i1.sndcdn.com/artworks-000250895611-ai5dbv-t500x500.jpg);
  background-size: cover;
}

/* edits end */
/* edits end */


  /* Define the grid */
  .container {
    display: grid;
    grid-template-columns: 18% 60% 18%;
    grid-gap: 2% 2%;
    grid-template-rows: 10% auto 10%;
  }
  /* Place items on the grid */
  .header {
    grid-column: 1 / span 3;

  }
  .sidebar {
    grid-row-end: span 2;
  }
  .content {
    grid-column: 2;
  }

}


